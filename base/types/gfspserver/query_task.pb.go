// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/query_task.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpQueryTasksRequest struct {
	TaskSubKey string `protobuf:"bytes,1,opt,name=task_sub_key,json=taskSubKey,proto3" json:"task_sub_key,omitempty"`
}

func (m *GfSpQueryTasksRequest) Reset()         { *m = GfSpQueryTasksRequest{} }
func (m *GfSpQueryTasksRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryTasksRequest) ProtoMessage()    {}
func (*GfSpQueryTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{0}
}
func (m *GfSpQueryTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryTasksRequest.Merge(m, src)
}
func (m *GfSpQueryTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryTasksRequest proto.InternalMessageInfo

func (m *GfSpQueryTasksRequest) GetTaskSubKey() string {
	if m != nil {
		return m.TaskSubKey
	}
	return ""
}

type GfSpQueryTasksResponse struct {
	Err      *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TaskInfo []string              `protobuf:"bytes,2,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (m *GfSpQueryTasksResponse) Reset()         { *m = GfSpQueryTasksResponse{} }
func (m *GfSpQueryTasksResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryTasksResponse) ProtoMessage()    {}
func (*GfSpQueryTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{1}
}
func (m *GfSpQueryTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryTasksResponse.Merge(m, src)
}
func (m *GfSpQueryTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryTasksResponse proto.InternalMessageInfo

func (m *GfSpQueryTasksResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQueryTasksResponse) GetTaskInfo() []string {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*GfSpQueryTasksRequest)(nil), "base.types.gfspserver.GfSpQueryTasksRequest")
	proto.RegisterType((*GfSpQueryTasksResponse)(nil), "base.types.gfspserver.GfSpQueryTasksResponse")
}

func init() {
	proto.RegisterFile("base/types/gfspserver/query_task.proto", fileDescriptor_35e509f6e3771557)
}

var fileDescriptor_35e509f6e3771557 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x13, 0x0b, 0x62, 0x4f, 0x71, 0x08, 0x56, 0x4a, 0x85, 0x10, 0x3b, 0x48, 0x07, 0x73,
	0x07, 0x75, 0x72, 0x15, 0x54, 0xc4, 0xc9, 0xd4, 0xc9, 0xa5, 0xe6, 0xda, 0x97, 0xf4, 0xa8, 0xe6,
	0xae, 0xef, 0x5d, 0x0a, 0xf9, 0x04, 0xae, 0x7e, 0x2c, 0xc7, 0x8e, 0x8e, 0xd2, 0x7e, 0x11, 0xb9,
	0x74, 0x90, 0x96, 0x0e, 0x4e, 0x77, 0x3c, 0x7e, 0xbf, 0x7b, 0xff, 0x77, 0x8f, 0x5d, 0xc8, 0x94,
	0x40, 0xd8, 0xca, 0x00, 0x89, 0x3c, 0x23, 0x43, 0x80, 0x73, 0x40, 0x31, 0x2b, 0x01, 0xab, 0xa1,
	0x4d, 0x69, 0xca, 0x0d, 0x6a, 0xab, 0x83, 0x96, 0xe3, 0x78, 0xcd, 0xf1, 0x3f, 0xae, 0x73, 0xbe,
	0xa5, 0x03, 0xa2, 0x46, 0x12, 0xf5, 0xb1, 0x36, 0xbb, 0xd7, 0xac, 0x75, 0x9f, 0x0d, 0xcc, 0x93,
	0x7b, 0xf1, 0x39, 0xa5, 0x29, 0x25, 0x30, 0x2b, 0x81, 0x6c, 0x10, 0xb1, 0x23, 0xd7, 0x60, 0x48,
	0xa5, 0x1c, 0x4e, 0xa1, 0x6a, 0xfb, 0x91, 0xdf, 0x6b, 0x26, 0xcc, 0xd5, 0x06, 0xa5, 0x7c, 0x84,
	0xaa, 0xab, 0xd8, 0xe9, 0xb6, 0x4a, 0x46, 0x17, 0x04, 0x41, 0x9f, 0x35, 0x00, 0xb1, 0x56, 0x0e,
	0xfb, 0x11, 0xdf, 0x0a, 0xb7, 0x4e, 0xc1, 0x9d, 0x7b, 0xeb, 0xae, 0x89, 0x83, 0x83, 0x33, 0xd6,
	0xac, 0xfb, 0xa9, 0x22, 0xd3, 0xed, 0xbd, 0xa8, 0xd1, 0x6b, 0x26, 0x07, 0xae, 0xf0, 0x50, 0x64,
	0xba, 0xff, 0xe1, 0xb3, 0x93, 0x8d, 0x5e, 0x03, 0xc0, 0xb9, 0x1a, 0x41, 0xa0, 0xd9, 0xf1, 0x66,
	0x86, 0xe0, 0x92, 0xef, 0xfc, 0x0b, 0xbe, 0x73, 0xca, 0x4e, 0xfc, 0x4f, 0x7a, 0x3d, 0x58, 0xd7,
	0xbb, 0x79, 0xfd, 0x5a, 0x86, 0xfe, 0x62, 0x19, 0xfa, 0x3f, 0xcb, 0xd0, 0xff, 0x5c, 0x85, 0xde,
	0x62, 0x15, 0x7a, 0xdf, 0xab, 0xd0, 0x7b, 0xb9, 0xcb, 0x95, 0x9d, 0x94, 0x92, 0x8f, 0xf4, 0xbb,
	0x90, 0x85, 0x8c, 0x47, 0x93, 0x54, 0x15, 0x22, 0x47, 0x80, 0x22, 0x53, 0xf0, 0x36, 0x8e, 0xc9,
	0x6a, 0x4c, 0x73, 0x88, 0x0d, 0xea, 0xb9, 0x1a, 0x03, 0x8a, 0x9d, 0xcb, 0x95, 0xfb, 0xf5, 0x62,
	0xae, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x7f, 0x2b, 0x51, 0xfc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpQueryTaskServiceClient is the client API for GfSpQueryTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpQueryTaskServiceClient interface {
	GfSpQueryTasks(ctx context.Context, in *GfSpQueryTasksRequest, opts ...grpc.CallOption) (*GfSpQueryTasksResponse, error)
}

type gfSpQueryTaskServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpQueryTaskServiceClient(cc grpc1.ClientConn) GfSpQueryTaskServiceClient {
	return &gfSpQueryTaskServiceClient{cc}
}

func (c *gfSpQueryTaskServiceClient) GfSpQueryTasks(ctx context.Context, in *GfSpQueryTasksRequest, opts ...grpc.CallOption) (*GfSpQueryTasksResponse, error) {
	out := new(GfSpQueryTasksResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpQueryTaskService/GfSpQueryTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpQueryTaskServiceServer is the server API for GfSpQueryTaskService service.
type GfSpQueryTaskServiceServer interface {
	GfSpQueryTasks(context.Context, *GfSpQueryTasksRequest) (*GfSpQueryTasksResponse, error)
}

// UnimplementedGfSpQueryTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpQueryTaskServiceServer struct {
}

func (*UnimplementedGfSpQueryTaskServiceServer) GfSpQueryTasks(ctx context.Context, req *GfSpQueryTasksRequest) (*GfSpQueryTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryTasks not implemented")
}

func RegisterGfSpQueryTaskServiceServer(s grpc1.Server, srv GfSpQueryTaskServiceServer) {
	s.RegisterService(&_GfSpQueryTaskService_serviceDesc, srv)
}

func _GfSpQueryTaskService_GfSpQueryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpQueryTaskServiceServer).GfSpQueryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpQueryTaskService/GfSpQueryTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpQueryTaskServiceServer).GfSpQueryTasks(ctx, req.(*GfSpQueryTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpQueryTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpQueryTaskService",
	HandlerType: (*GfSpQueryTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpQueryTasks",
			Handler:    _GfSpQueryTaskService_GfSpQueryTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/query_task.proto",
}

func (m *GfSpQueryTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskSubKey) > 0 {
		i -= len(m.TaskSubKey)
		copy(dAtA[i:], m.TaskSubKey)
		i = encodeVarintQueryTask(dAtA, i, uint64(len(m.TaskSubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskInfo) > 0 {
		for iNdEx := len(m.TaskInfo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskInfo[iNdEx])
			copy(dAtA[i:], m.TaskInfo[iNdEx])
			i = encodeVarintQueryTask(dAtA, i, uint64(len(m.TaskInfo[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpQueryTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskSubKey)
	if l > 0 {
		n += 1 + l + sovQueryTask(uint64(l))
	}
	return n
}

func (m *GfSpQueryTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovQueryTask(uint64(l))
	}
	if len(m.TaskInfo) > 0 {
		for _, s := range m.TaskInfo {
			l = len(s)
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	return n
}

func sovQueryTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTask(x uint64) (n int) {
	return sovQueryTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpQueryTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskSubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfo = append(m.TaskInfo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTask = fmt.Errorf("proto: unexpected end of group")
)
