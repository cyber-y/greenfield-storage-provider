// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/authorization.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpAuthorizeRequest struct {
	AuthType    int32  `protobuf:"varint,1,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	UserAccount string `protobuf:"bytes,2,opt,name=user_account,json=userAccount,proto3" json:"user_account,omitempty"`
	BucketName  string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	ObjectName  string `protobuf:"bytes,4,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (m *GfSpAuthorizeRequest) Reset()         { *m = GfSpAuthorizeRequest{} }
func (m *GfSpAuthorizeRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpAuthorizeRequest) ProtoMessage()    {}
func (*GfSpAuthorizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_acc3b1b470fd494e, []int{0}
}
func (m *GfSpAuthorizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpAuthorizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpAuthorizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpAuthorizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpAuthorizeRequest.Merge(m, src)
}
func (m *GfSpAuthorizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpAuthorizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpAuthorizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpAuthorizeRequest proto.InternalMessageInfo

func (m *GfSpAuthorizeRequest) GetAuthType() int32 {
	if m != nil {
		return m.AuthType
	}
	return 0
}

func (m *GfSpAuthorizeRequest) GetUserAccount() string {
	if m != nil {
		return m.UserAccount
	}
	return ""
}

func (m *GfSpAuthorizeRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpAuthorizeRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

type GfSpAuthorizeResponse struct {
	Err     *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Allowed bool                  `protobuf:"varint,2,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (m *GfSpAuthorizeResponse) Reset()         { *m = GfSpAuthorizeResponse{} }
func (m *GfSpAuthorizeResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpAuthorizeResponse) ProtoMessage()    {}
func (*GfSpAuthorizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acc3b1b470fd494e, []int{1}
}
func (m *GfSpAuthorizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpAuthorizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpAuthorizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpAuthorizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpAuthorizeResponse.Merge(m, src)
}
func (m *GfSpAuthorizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpAuthorizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpAuthorizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpAuthorizeResponse proto.InternalMessageInfo

func (m *GfSpAuthorizeResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpAuthorizeResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func init() {
	proto.RegisterType((*GfSpAuthorizeRequest)(nil), "base.types.gfspserver.GfSpAuthorizeRequest")
	proto.RegisterType((*GfSpAuthorizeResponse)(nil), "base.types.gfspserver.GfSpAuthorizeResponse")
}

func init() {
	proto.RegisterFile("base/types/gfspserver/authorization.proto", fileDescriptor_acc3b1b470fd494e)
}

var fileDescriptor_acc3b1b470fd494e = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x6e, 0xe2, 0x30,
	0x10, 0xc7, 0xe3, 0x65, 0x3f, 0xc0, 0xec, 0xc9, 0xbb, 0x48, 0x11, 0x2b, 0x65, 0x81, 0x13, 0xab,
	0x2d, 0x8e, 0x44, 0x9f, 0x80, 0x4a, 0x6d, 0x6f, 0x3d, 0x84, 0xaa, 0x87, 0x5e, 0xa8, 0x13, 0x26,
	0xc1, 0x2d, 0xc4, 0xe9, 0xd8, 0xa1, 0xa2, 0x0f, 0x51, 0xf5, 0xd8, 0x47, 0xea, 0x91, 0x63, 0x8f,
	0x15, 0xbc, 0x48, 0xe5, 0x84, 0x7e, 0x08, 0x71, 0xe8, 0xc9, 0xf6, 0xdf, 0xbf, 0x99, 0xf9, 0xcf,
	0xd8, 0xf4, 0x5f, 0x28, 0x34, 0xf8, 0x66, 0x91, 0x81, 0xf6, 0x93, 0x58, 0x67, 0x1a, 0x70, 0x0e,
	0xe8, 0x8b, 0xdc, 0x4c, 0x14, 0xca, 0x5b, 0x61, 0xa4, 0x4a, 0x79, 0x86, 0xca, 0x28, 0xd6, 0xb0,
	0x28, 0x2f, 0x50, 0xfe, 0x8e, 0x36, 0xdb, 0x5b, 0x19, 0x00, 0x51, 0xa1, 0xf6, 0x8b, 0xa5, 0x8c,
	0xec, 0x3c, 0x10, 0xfa, 0xfb, 0x38, 0x1e, 0x66, 0x83, 0x4d, 0x56, 0x08, 0xe0, 0x3a, 0x07, 0x6d,
	0xd8, 0x1f, 0x5a, 0xb3, 0x95, 0x46, 0x36, 0xda, 0x25, 0x2d, 0xd2, 0xfd, 0x16, 0x54, 0xad, 0x70,
	0xba, 0xc8, 0x80, 0xb5, 0xe9, 0xcf, 0x5c, 0x03, 0x8e, 0x44, 0x14, 0xa9, 0x3c, 0x35, 0xee, 0x97,
	0x16, 0xe9, 0xd6, 0x82, 0xba, 0xd5, 0x06, 0xa5, 0xc4, 0xfe, 0xd2, 0x7a, 0x98, 0x47, 0x57, 0x60,
	0x46, 0xa9, 0x98, 0x81, 0x5b, 0x29, 0x08, 0x5a, 0x4a, 0x27, 0x62, 0x06, 0x16, 0x50, 0xe1, 0x25,
	0x44, 0x1b, 0xe0, 0x6b, 0x09, 0x94, 0x92, 0x05, 0x3a, 0x40, 0x1b, 0x5b, 0xce, 0x74, 0xa6, 0x52,
	0x0d, 0xac, 0x4f, 0x2b, 0x80, 0x58, 0x98, 0xaa, 0xf7, 0x5b, 0x7c, 0xab, 0xf7, 0xb2, 0x49, 0x6e,
	0x43, 0x0f, 0xed, 0x36, 0xb0, 0x30, 0x73, 0xe9, 0x0f, 0x31, 0x9d, 0xaa, 0x1b, 0x18, 0x17, 0x66,
	0xab, 0xc1, 0xeb, 0xb1, 0x7f, 0x47, 0xa8, 0xfb, 0xb1, 0x4e, 0x31, 0xd7, 0x21, 0xe0, 0x5c, 0x46,
	0xc0, 0x90, 0xfe, 0xb2, 0x77, 0x67, 0x80, 0x32, 0x5e, 0xbc, 0x39, 0x61, 0xff, 0xf9, 0xce, 0x81,
	0xf3, 0x5d, 0x93, 0x6c, 0xee, 0x7d, 0x0e, 0x2e, 0x9b, 0xeb, 0x38, 0x07, 0x17, 0x8f, 0x2b, 0x8f,
	0x2c, 0x57, 0x1e, 0x79, 0x5e, 0x79, 0xe4, 0x7e, 0xed, 0x39, 0xcb, 0xb5, 0xe7, 0x3c, 0xad, 0x3d,
	0xe7, 0xfc, 0x28, 0x91, 0x66, 0x92, 0x87, 0x3c, 0x52, 0x33, 0x3f, 0x4c, 0xc3, 0x5e, 0x34, 0x11,
	0x32, 0xf5, 0x13, 0x04, 0x48, 0x63, 0x09, 0xd3, 0x71, 0x4f, 0x1b, 0x85, 0x22, 0x81, 0x5e, 0x86,
	0x6a, 0x2e, 0xc7, 0x80, 0xfe, 0xce, 0x2f, 0x14, 0x7e, 0x2f, 0xde, 0x7e, 0xff, 0x25, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0x37, 0x91, 0x46, 0x62, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpAuthorizationServiceClient is the client API for GfSpAuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpAuthorizationServiceClient interface {
	GfSpVerifyAuthorize(ctx context.Context, in *GfSpAuthorizeRequest, opts ...grpc.CallOption) (*GfSpAuthorizeResponse, error)
}

type gfSpAuthorizationServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpAuthorizationServiceClient(cc grpc1.ClientConn) GfSpAuthorizationServiceClient {
	return &gfSpAuthorizationServiceClient{cc}
}

func (c *gfSpAuthorizationServiceClient) GfSpVerifyAuthorize(ctx context.Context, in *GfSpAuthorizeRequest, opts ...grpc.CallOption) (*GfSpAuthorizeResponse, error) {
	out := new(GfSpAuthorizeResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpAuthorizationService/GfSpVerifyAuthorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpAuthorizationServiceServer is the server API for GfSpAuthorizationService service.
type GfSpAuthorizationServiceServer interface {
	GfSpVerifyAuthorize(context.Context, *GfSpAuthorizeRequest) (*GfSpAuthorizeResponse, error)
}

// UnimplementedGfSpAuthorizationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpAuthorizationServiceServer struct {
}

func (*UnimplementedGfSpAuthorizationServiceServer) GfSpVerifyAuthorize(ctx context.Context, req *GfSpAuthorizeRequest) (*GfSpAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpVerifyAuthorize not implemented")
}

func RegisterGfSpAuthorizationServiceServer(s grpc1.Server, srv GfSpAuthorizationServiceServer) {
	s.RegisterService(&_GfSpAuthorizationService_serviceDesc, srv)
}

func _GfSpAuthorizationService_GfSpVerifyAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpAuthorizationServiceServer).GfSpVerifyAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpAuthorizationService/GfSpVerifyAuthorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpAuthorizationServiceServer).GfSpVerifyAuthorize(ctx, req.(*GfSpAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpAuthorizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpAuthorizationService",
	HandlerType: (*GfSpAuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpVerifyAuthorize",
			Handler:    _GfSpAuthorizationService_GfSpVerifyAuthorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/authorization.proto",
}

func (m *GfSpAuthorizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpAuthorizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAuthorizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintAuthorization(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintAuthorization(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserAccount) > 0 {
		i -= len(m.UserAccount)
		copy(dAtA[i:], m.UserAccount)
		i = encodeVarintAuthorization(dAtA, i, uint64(len(m.UserAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuthType != 0 {
		i = encodeVarintAuthorization(dAtA, i, uint64(m.AuthType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpAuthorizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpAuthorizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAuthorizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Allowed {
		i--
		if m.Allowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthorization(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthorization(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthorization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpAuthorizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthType != 0 {
		n += 1 + sovAuthorization(uint64(m.AuthType))
	}
	l = len(m.UserAccount)
	if l > 0 {
		n += 1 + l + sovAuthorization(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovAuthorization(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovAuthorization(uint64(l))
	}
	return n
}

func (m *GfSpAuthorizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovAuthorization(uint64(l))
	}
	if m.Allowed {
		n += 2
	}
	return n
}

func sovAuthorization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthorization(x uint64) (n int) {
	return sovAuthorization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpAuthorizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpAuthorizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpAuthorizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthType", wireType)
			}
			m.AuthType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthorization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthorization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpAuthorizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpAuthorizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpAuthorizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthorization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthorization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthorization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthorization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthorization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthorization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthorization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthorization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthorization = fmt.Errorf("proto: unexpected end of group")
)
