// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/sign.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	gfspp2p "github.com/bnb-chain/greenfield-storage-provider/base/types/gfspp2p"
	gfsptask "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsptask"
	types "github.com/bnb-chain/greenfield/x/storage/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpSignIntegrityHash struct {
	ObjectId  uint64   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Checksums [][]byte `protobuf:"bytes,2,rep,name=checksums,proto3" json:"checksums,omitempty"`
}

func (m *GfSpSignIntegrityHash) Reset()         { *m = GfSpSignIntegrityHash{} }
func (m *GfSpSignIntegrityHash) String() string { return proto.CompactTextString(m) }
func (*GfSpSignIntegrityHash) ProtoMessage()    {}
func (*GfSpSignIntegrityHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5938400680494, []int{0}
}
func (m *GfSpSignIntegrityHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpSignIntegrityHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpSignIntegrityHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpSignIntegrityHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpSignIntegrityHash.Merge(m, src)
}
func (m *GfSpSignIntegrityHash) XXX_Size() int {
	return m.Size()
}
func (m *GfSpSignIntegrityHash) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpSignIntegrityHash.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpSignIntegrityHash proto.InternalMessageInfo

func (m *GfSpSignIntegrityHash) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *GfSpSignIntegrityHash) GetChecksums() [][]byte {
	if m != nil {
		return m.Checksums
	}
	return nil
}

type GfSpSignRequest struct {
	// Types that are valid to be assigned to Request:
	//	*GfSpSignRequest_CreateBucketInfo
	//	*GfSpSignRequest_CreateObjectInfo
	//	*GfSpSignRequest_SealObjectInfo
	//	*GfSpSignRequest_DiscontinueBucketInfo
	//	*GfSpSignRequest_SignIntegrity
	//	*GfSpSignRequest_PingMsg
	//	*GfSpSignRequest_PongMsg
	//	*GfSpSignRequest_GfspReplicatePieceApprovalTask
	//	*GfSpSignRequest_GfspReceivePieceTask
	Request isGfSpSignRequest_Request `protobuf_oneof:"request"`
}

func (m *GfSpSignRequest) Reset()         { *m = GfSpSignRequest{} }
func (m *GfSpSignRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpSignRequest) ProtoMessage()    {}
func (*GfSpSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5938400680494, []int{1}
}
func (m *GfSpSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpSignRequest.Merge(m, src)
}
func (m *GfSpSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpSignRequest proto.InternalMessageInfo

type isGfSpSignRequest_Request interface {
	isGfSpSignRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GfSpSignRequest_CreateBucketInfo struct {
	CreateBucketInfo *types.MsgCreateBucket `protobuf:"bytes,1,opt,name=create_bucket_info,json=createBucketInfo,proto3,oneof" json:"create_bucket_info,omitempty"`
}
type GfSpSignRequest_CreateObjectInfo struct {
	CreateObjectInfo *types.MsgCreateObject `protobuf:"bytes,2,opt,name=create_object_info,json=createObjectInfo,proto3,oneof" json:"create_object_info,omitempty"`
}
type GfSpSignRequest_SealObjectInfo struct {
	SealObjectInfo *types.MsgSealObject `protobuf:"bytes,3,opt,name=seal_object_info,json=sealObjectInfo,proto3,oneof" json:"seal_object_info,omitempty"`
}
type GfSpSignRequest_DiscontinueBucketInfo struct {
	DiscontinueBucketInfo *types.MsgDiscontinueBucket `protobuf:"bytes,4,opt,name=discontinue_bucket_info,json=discontinueBucketInfo,proto3,oneof" json:"discontinue_bucket_info,omitempty"`
}
type GfSpSignRequest_SignIntegrity struct {
	SignIntegrity *GfSpSignIntegrityHash `protobuf:"bytes,5,opt,name=sign_integrity,json=signIntegrity,proto3,oneof" json:"sign_integrity,omitempty"`
}
type GfSpSignRequest_PingMsg struct {
	PingMsg *gfspp2p.GfSpPing `protobuf:"bytes,6,opt,name=ping_msg,json=pingMsg,proto3,oneof" json:"ping_msg,omitempty"`
}
type GfSpSignRequest_PongMsg struct {
	PongMsg *gfspp2p.GfSpPong `protobuf:"bytes,7,opt,name=pong_msg,json=pongMsg,proto3,oneof" json:"pong_msg,omitempty"`
}
type GfSpSignRequest_GfspReplicatePieceApprovalTask struct {
	GfspReplicatePieceApprovalTask *gfsptask.GfSpReplicatePieceApprovalTask `protobuf:"bytes,8,opt,name=gfsp_replicate_piece_approval_task,json=gfspReplicatePieceApprovalTask,proto3,oneof" json:"gfsp_replicate_piece_approval_task,omitempty"`
}
type GfSpSignRequest_GfspReceivePieceTask struct {
	GfspReceivePieceTask *gfsptask.GfSpReceivePieceTask `protobuf:"bytes,9,opt,name=gfsp_receive_piece_task,json=gfspReceivePieceTask,proto3,oneof" json:"gfsp_receive_piece_task,omitempty"`
}

func (*GfSpSignRequest_CreateBucketInfo) isGfSpSignRequest_Request()               {}
func (*GfSpSignRequest_CreateObjectInfo) isGfSpSignRequest_Request()               {}
func (*GfSpSignRequest_SealObjectInfo) isGfSpSignRequest_Request()                 {}
func (*GfSpSignRequest_DiscontinueBucketInfo) isGfSpSignRequest_Request()          {}
func (*GfSpSignRequest_SignIntegrity) isGfSpSignRequest_Request()                  {}
func (*GfSpSignRequest_PingMsg) isGfSpSignRequest_Request()                        {}
func (*GfSpSignRequest_PongMsg) isGfSpSignRequest_Request()                        {}
func (*GfSpSignRequest_GfspReplicatePieceApprovalTask) isGfSpSignRequest_Request() {}
func (*GfSpSignRequest_GfspReceivePieceTask) isGfSpSignRequest_Request()           {}

func (m *GfSpSignRequest) GetRequest() isGfSpSignRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GfSpSignRequest) GetCreateBucketInfo() *types.MsgCreateBucket {
	if x, ok := m.GetRequest().(*GfSpSignRequest_CreateBucketInfo); ok {
		return x.CreateBucketInfo
	}
	return nil
}

func (m *GfSpSignRequest) GetCreateObjectInfo() *types.MsgCreateObject {
	if x, ok := m.GetRequest().(*GfSpSignRequest_CreateObjectInfo); ok {
		return x.CreateObjectInfo
	}
	return nil
}

func (m *GfSpSignRequest) GetSealObjectInfo() *types.MsgSealObject {
	if x, ok := m.GetRequest().(*GfSpSignRequest_SealObjectInfo); ok {
		return x.SealObjectInfo
	}
	return nil
}

func (m *GfSpSignRequest) GetDiscontinueBucketInfo() *types.MsgDiscontinueBucket {
	if x, ok := m.GetRequest().(*GfSpSignRequest_DiscontinueBucketInfo); ok {
		return x.DiscontinueBucketInfo
	}
	return nil
}

func (m *GfSpSignRequest) GetSignIntegrity() *GfSpSignIntegrityHash {
	if x, ok := m.GetRequest().(*GfSpSignRequest_SignIntegrity); ok {
		return x.SignIntegrity
	}
	return nil
}

func (m *GfSpSignRequest) GetPingMsg() *gfspp2p.GfSpPing {
	if x, ok := m.GetRequest().(*GfSpSignRequest_PingMsg); ok {
		return x.PingMsg
	}
	return nil
}

func (m *GfSpSignRequest) GetPongMsg() *gfspp2p.GfSpPong {
	if x, ok := m.GetRequest().(*GfSpSignRequest_PongMsg); ok {
		return x.PongMsg
	}
	return nil
}

func (m *GfSpSignRequest) GetGfspReplicatePieceApprovalTask() *gfsptask.GfSpReplicatePieceApprovalTask {
	if x, ok := m.GetRequest().(*GfSpSignRequest_GfspReplicatePieceApprovalTask); ok {
		return x.GfspReplicatePieceApprovalTask
	}
	return nil
}

func (m *GfSpSignRequest) GetGfspReceivePieceTask() *gfsptask.GfSpReceivePieceTask {
	if x, ok := m.GetRequest().(*GfSpSignRequest_GfspReceivePieceTask); ok {
		return x.GfspReceivePieceTask
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GfSpSignRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GfSpSignRequest_CreateBucketInfo)(nil),
		(*GfSpSignRequest_CreateObjectInfo)(nil),
		(*GfSpSignRequest_SealObjectInfo)(nil),
		(*GfSpSignRequest_DiscontinueBucketInfo)(nil),
		(*GfSpSignRequest_SignIntegrity)(nil),
		(*GfSpSignRequest_PingMsg)(nil),
		(*GfSpSignRequest_PongMsg)(nil),
		(*GfSpSignRequest_GfspReplicatePieceApprovalTask)(nil),
		(*GfSpSignRequest_GfspReceivePieceTask)(nil),
	}
}

type GfSpSignResponse struct {
	Err           *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Signature     []byte                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	IntegrityHash []byte                `protobuf:"bytes,3,opt,name=integrity_hash,json=integrityHash,proto3" json:"integrity_hash,omitempty"`
}

func (m *GfSpSignResponse) Reset()         { *m = GfSpSignResponse{} }
func (m *GfSpSignResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpSignResponse) ProtoMessage()    {}
func (*GfSpSignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5938400680494, []int{2}
}
func (m *GfSpSignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpSignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpSignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpSignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpSignResponse.Merge(m, src)
}
func (m *GfSpSignResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpSignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpSignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpSignResponse proto.InternalMessageInfo

func (m *GfSpSignResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpSignResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GfSpSignResponse) GetIntegrityHash() []byte {
	if m != nil {
		return m.IntegrityHash
	}
	return nil
}

func init() {
	proto.RegisterType((*GfSpSignIntegrityHash)(nil), "base.types.gfspserver.GfSpSignIntegrityHash")
	proto.RegisterType((*GfSpSignRequest)(nil), "base.types.gfspserver.GfSpSignRequest")
	proto.RegisterType((*GfSpSignResponse)(nil), "base.types.gfspserver.GfSpSignResponse")
}

func init() { proto.RegisterFile("base/types/gfspserver/sign.proto", fileDescriptor_16c5938400680494) }

var fileDescriptor_16c5938400680494 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xed, 0xb6, 0x6f, 0x9b, 0xec, 0xdb, 0x96, 0xca, 0xa2, 0x22, 0x6a, 0x2b, 0x2b, 0x0d,
	0x02, 0x8a, 0x44, 0x6d, 0x29, 0x3d, 0x71, 0xa4, 0xfc, 0x4b, 0x0f, 0x15, 0x95, 0x03, 0x17, 0x24,
	0x64, 0xd6, 0x9b, 0xc9, 0x66, 0x49, 0xba, 0xbb, 0xec, 0x6e, 0x22, 0x7a, 0xe4, 0xcc, 0x85, 0x4f,
	0xc2, 0xe7, 0xe0, 0xd8, 0x23, 0x47, 0xd4, 0x7e, 0x11, 0xb4, 0x6b, 0x27, 0x4e, 0xad, 0x96, 0x72,
	0x49, 0xe2, 0xd9, 0xe7, 0xf9, 0xcd, 0x38, 0x33, 0xb3, 0xa8, 0x99, 0x61, 0x0d, 0xb1, 0x39, 0x93,
	0xa0, 0x63, 0xda, 0xd7, 0x52, 0x83, 0x9a, 0x80, 0x8a, 0x35, 0xa3, 0x3c, 0x92, 0x4a, 0x18, 0x11,
	0x6c, 0x5a, 0x45, 0xe4, 0x14, 0x51, 0xa9, 0xd8, 0xda, 0xad, 0x18, 0x41, 0x29, 0xa1, 0x74, 0xec,
	0xbe, 0x72, 0xe7, 0xd6, 0x4e, 0x45, 0x22, 0xdb, 0x32, 0x96, 0x6d, 0x59, 0x9c, 0x86, 0x95, 0x53,
	0x83, 0xf5, 0x30, 0xb6, 0x1f, 0xc5, 0xf9, 0x36, 0x55, 0x00, 0xbc, 0xcf, 0x60, 0xd4, 0x8b, 0xb5,
	0x11, 0x0a, 0x53, 0x88, 0xcd, 0x97, 0xfc, 0xb0, 0x95, 0xa0, 0xcd, 0xd7, 0xfd, 0xae, 0xec, 0x32,
	0xca, 0x8f, 0xb8, 0x01, 0xaa, 0x98, 0x39, 0xeb, 0x60, 0x3d, 0x08, 0xb6, 0x51, 0x5d, 0x64, 0x9f,
	0x80, 0x98, 0x94, 0xf5, 0x1a, 0x7e, 0xd3, 0xdf, 0x5b, 0x4a, 0x6a, 0x79, 0xe0, 0xa8, 0x17, 0xec,
	0xa0, 0x3a, 0x19, 0x00, 0x19, 0xea, 0xf1, 0xa9, 0x6e, 0x2c, 0x34, 0x17, 0xf7, 0x56, 0x93, 0x32,
	0xd0, 0xfa, 0xb1, 0x8c, 0xee, 0x4c, 0xa1, 0x09, 0x7c, 0x1e, 0x83, 0x36, 0x41, 0x17, 0x05, 0x44,
	0x01, 0x36, 0x90, 0x66, 0x63, 0x32, 0x04, 0x93, 0x32, 0xde, 0x17, 0x8e, 0xfb, 0x7f, 0xfb, 0x7e,
	0x54, 0x56, 0x18, 0x15, 0x15, 0x46, 0xc7, 0x9a, 0x3e, 0x77, 0x86, 0x43, 0xa7, 0xef, 0x78, 0xc9,
	0x06, 0x99, 0x7b, 0x3e, 0xe2, 0x7d, 0x31, 0x07, 0x9d, 0x96, 0x6a, 0xa1, 0x0b, 0xff, 0x00, 0x7d,
	0xe3, 0xf4, 0x25, 0x34, 0x7f, 0x76, 0xd0, 0x63, 0xb4, 0xa1, 0x01, 0x8f, 0xae, 0x20, 0x17, 0x1d,
	0x72, 0xf7, 0x06, 0x64, 0x17, 0xf0, 0x68, 0x06, 0x5c, 0xd7, 0xb3, 0x27, 0x87, 0xcb, 0xd0, 0xbd,
	0x1e, 0xd3, 0x44, 0x70, 0xc3, 0xf8, 0xf8, 0xea, 0xdb, 0x2f, 0x39, 0xea, 0xde, 0x0d, 0xd4, 0x17,
	0xa5, 0x6b, 0xf6, 0x17, 0x6c, 0xf6, 0xaa, 0x41, 0x97, 0xe3, 0x1d, 0x5a, 0xb7, 0x73, 0x96, 0xb2,
	0x69, 0x07, 0x1b, 0xff, 0x39, 0xf4, 0x93, 0xe8, 0xda, 0x91, 0x8b, 0xae, 0xed, 0x78, 0xc7, 0x4b,
	0xd6, 0xf4, 0x7c, 0x30, 0x78, 0x8a, 0x6a, 0x92, 0x71, 0x9a, 0x9e, 0x6a, 0xda, 0x58, 0x76, 0xc0,
	0x9d, 0x2a, 0xd0, 0x4e, 0xa1, 0xa5, 0x9d, 0x30, 0x4e, 0x3b, 0x5e, 0xb2, 0x62, 0xf5, 0xc7, 0x9a,
	0x3a, 0xab, 0x28, 0xac, 0x2b, 0xb7, 0x58, 0x45, 0x61, 0x15, 0xb9, 0xf5, 0xab, 0x8f, 0x5a, 0xf6,
	0x3c, 0x55, 0x20, 0x47, 0x8c, 0xd8, 0xee, 0x4a, 0x06, 0x04, 0x52, 0x2c, 0xa5, 0x12, 0x13, 0x3c,
	0x4a, 0xed, 0x6c, 0x37, 0x6a, 0x8e, 0x7a, 0x50, 0xa5, 0xba, 0xb9, 0xb7, 0xd8, 0x64, 0xea, 0x3e,
	0xb1, 0xe6, 0x67, 0x85, 0xf7, 0x2d, 0xd6, 0xc3, 0x8e, 0x97, 0x84, 0x56, 0x7a, 0xb3, 0xc2, 0x36,
	0xad, 0x28, 0x81, 0x00, 0x9b, 0x4c, 0x0b, 0x70, 0x79, 0xeb, 0x2e, 0xef, 0xe3, 0xbf, 0xe4, 0x75,
	0x16, 0xc7, 0x2c, 0xb2, 0xdd, 0xcd, 0xb3, 0x5d, 0x8d, 0x1f, 0xd6, 0xd1, 0x8a, 0xca, 0x97, 0xa3,
	0xf5, 0xcd, 0x47, 0x1b, 0xe5, 0xc2, 0x68, 0x29, 0xb8, 0x86, 0xa0, 0x8d, 0x16, 0x41, 0xa9, 0x62,
	0x45, 0x9a, 0xd5, 0x7c, 0xf9, 0x2d, 0xe1, 0x32, 0xbe, 0xb4, 0x3f, 0x13, 0x2b, 0xb6, 0x7b, 0x69,
	0x5b, 0x88, 0xcd, 0x58, 0x81, 0xdb, 0x83, 0xd5, 0xa4, 0x0c, 0x04, 0x0f, 0xd0, 0xfa, 0x6c, 0x42,
	0xd2, 0x01, 0xd6, 0x03, 0x37, 0xd7, 0xab, 0xc9, 0x1a, 0x9b, 0x9f, 0x83, 0xb6, 0x2c, 0xb7, 0xb7,
	0x0b, 0x6a, 0xc2, 0x08, 0x04, 0x1f, 0x50, 0x6d, 0x1a, 0x0a, 0x1e, 0xde, 0x32, 0x54, 0xc5, 0xc6,
	0x6f, 0x3d, 0xba, 0x55, 0x97, 0xbf, 0x68, 0xcb, 0x3b, 0xfc, 0xf8, 0xf3, 0x22, 0xf4, 0xcf, 0x2f,
	0x42, 0xff, 0xf7, 0x45, 0xe8, 0x7f, 0xbf, 0x0c, 0xbd, 0xf3, 0xcb, 0xd0, 0xfb, 0x75, 0x19, 0x7a,
	0xef, 0x5f, 0x51, 0x66, 0x06, 0xe3, 0x2c, 0x22, 0xe2, 0x34, 0xce, 0x78, 0xb6, 0x4f, 0x06, 0x98,
	0xf1, 0xb8, 0x5c, 0x98, 0xfd, 0x62, 0x61, 0xf6, 0x6d, 0xf3, 0x58, 0x0f, 0x54, 0x7c, 0xed, 0x35,
	0x9c, 0x2d, 0xbb, 0xdb, 0xee, 0xe0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0x25, 0x5d, 0x9f,
	0xa6, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpSignServiceClient is the client API for GfSpSignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpSignServiceClient interface {
	GfSpSign(ctx context.Context, in *GfSpSignRequest, opts ...grpc.CallOption) (*GfSpSignResponse, error)
}

type gfSpSignServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpSignServiceClient(cc grpc1.ClientConn) GfSpSignServiceClient {
	return &gfSpSignServiceClient{cc}
}

func (c *gfSpSignServiceClient) GfSpSign(ctx context.Context, in *GfSpSignRequest, opts ...grpc.CallOption) (*GfSpSignResponse, error) {
	out := new(GfSpSignResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpSignService/GfSpSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpSignServiceServer is the server API for GfSpSignService service.
type GfSpSignServiceServer interface {
	GfSpSign(context.Context, *GfSpSignRequest) (*GfSpSignResponse, error)
}

// UnimplementedGfSpSignServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpSignServiceServer struct {
}

func (*UnimplementedGfSpSignServiceServer) GfSpSign(ctx context.Context, req *GfSpSignRequest) (*GfSpSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpSign not implemented")
}

func RegisterGfSpSignServiceServer(s grpc1.Server, srv GfSpSignServiceServer) {
	s.RegisterService(&_GfSpSignService_serviceDesc, srv)
}

func _GfSpSignService_GfSpSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpSignServiceServer).GfSpSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpSignService/GfSpSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpSignServiceServer).GfSpSign(ctx, req.(*GfSpSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpSignService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpSignService",
	HandlerType: (*GfSpSignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpSign",
			Handler:    _GfSpSignService_GfSpSign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/sign.proto",
}

func (m *GfSpSignIntegrityHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpSignIntegrityHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignIntegrityHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksums) > 0 {
		for iNdEx := len(m.Checksums) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Checksums[iNdEx])
			copy(dAtA[i:], m.Checksums[iNdEx])
			i = encodeVarintSign(dAtA, i, uint64(len(m.Checksums[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ObjectId != 0 {
		i = encodeVarintSign(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpSignRequest_CreateBucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_CreateBucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateBucketInfo != nil {
		{
			size, err := m.CreateBucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_CreateObjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_CreateObjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateObjectInfo != nil {
		{
			size, err := m.CreateObjectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_SealObjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_SealObjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SealObjectInfo != nil {
		{
			size, err := m.SealObjectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_DiscontinueBucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_DiscontinueBucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DiscontinueBucketInfo != nil {
		{
			size, err := m.DiscontinueBucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_SignIntegrity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_SignIntegrity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignIntegrity != nil {
		{
			size, err := m.SignIntegrity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_PingMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_PingMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PingMsg != nil {
		{
			size, err := m.PingMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_PongMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_PongMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PongMsg != nil {
		{
			size, err := m.PongMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_GfspReplicatePieceApprovalTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_GfspReplicatePieceApprovalTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GfspReplicatePieceApprovalTask != nil {
		{
			size, err := m.GfspReplicatePieceApprovalTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignRequest_GfspReceivePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignRequest_GfspReceivePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GfspReceivePieceTask != nil {
		{
			size, err := m.GfspReceivePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpSignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpSignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IntegrityHash) > 0 {
		i -= len(m.IntegrityHash)
		copy(dAtA[i:], m.IntegrityHash)
		i = encodeVarintSign(dAtA, i, uint64(len(m.IntegrityHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSign(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSign(dAtA []byte, offset int, v uint64) int {
	offset -= sovSign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpSignIntegrityHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovSign(uint64(m.ObjectId))
	}
	if len(m.Checksums) > 0 {
		for _, b := range m.Checksums {
			l = len(b)
			n += 1 + l + sovSign(uint64(l))
		}
	}
	return n
}

func (m *GfSpSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *GfSpSignRequest_CreateBucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateBucketInfo != nil {
		l = m.CreateBucketInfo.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_CreateObjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateObjectInfo != nil {
		l = m.CreateObjectInfo.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_SealObjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SealObjectInfo != nil {
		l = m.SealObjectInfo.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_DiscontinueBucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscontinueBucketInfo != nil {
		l = m.DiscontinueBucketInfo.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_SignIntegrity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignIntegrity != nil {
		l = m.SignIntegrity.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_PingMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingMsg != nil {
		l = m.PingMsg.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_PongMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PongMsg != nil {
		l = m.PongMsg.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_GfspReplicatePieceApprovalTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GfspReplicatePieceApprovalTask != nil {
		l = m.GfspReplicatePieceApprovalTask.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignRequest_GfspReceivePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GfspReceivePieceTask != nil {
		l = m.GfspReceivePieceTask.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}
func (m *GfSpSignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovSign(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSign(uint64(l))
	}
	l = len(m.IntegrityHash)
	if l > 0 {
		n += 1 + l + sovSign(uint64(l))
	}
	return n
}

func sovSign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSign(x uint64) (n int) {
	return sovSign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpSignIntegrityHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpSignIntegrityHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpSignIntegrityHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, make([]byte, postIndex-iNdEx))
			copy(m.Checksums[len(m.Checksums)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgCreateBucket{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_CreateBucketInfo{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateObjectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgCreateObject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_CreateObjectInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealObjectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgSealObject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_SealObjectInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscontinueBucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgDiscontinueBucket{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_DiscontinueBucketInfo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignIntegrity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GfSpSignIntegrityHash{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_SignIntegrity{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfspp2p.GfSpPing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_PingMsg{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PongMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfspp2p.GfSpPong{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_PongMsg{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GfspReplicatePieceApprovalTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpReplicatePieceApprovalTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_GfspReplicatePieceApprovalTask{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GfspReceivePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpReceivePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpSignRequest_GfspReceivePieceTask{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpSignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpSignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpSignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrityHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegrityHash = append(m.IntegrityHash[:0], dAtA[iNdEx:postIndex]...)
			if m.IntegrityHash == nil {
				m.IntegrityHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSign = fmt.Errorf("proto: unexpected end of group")
)
